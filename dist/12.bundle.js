(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{101:function(e,t,a){},111:function(e,t,a){"use strict";a.r(t);var n=a(4),l=a.n(n),c=a(39),r=(a(101),a(19)),i=a(6),s=a(9),o=a(5),m=a(3),u=a(2),E=a(63),d=a(61),p=a(60),h=a(0);class g extends n.PureComponent{constructor(e){super(e),this.state={pageIndex:0}}componentDidMount(){let{pageIndex:e}=this.state;this.props.getNotiData(e)}async _createRequest(e,t){let{pageIndex:a}=this.state;await Object(i.a)(o.d,null,s.t+`/${e}/seen/${t}`,m.c,u.a,null,!1).then(e=>{e&&this.props.getNotiData(a-1)})}render(){let{noti:e}=this.props;return(l.a.createElement(d.a,{disableFooterData:!1},l.a.createElement("div",{className:"content"},l.a.createElement(c.Row,null,l.a.createElement(c.Col,{xs:2}),l.a.createElement(c.Col,{xs:20},l.a.createElement("div",{className:"all-noti-content "},l.a.createElement("div",{className:"noti-header "},l.a.createElement("h5",null,"Thông báo (",`${e.totalItems}`,")")),l.a.createElement("div",{className:"list-content "},e&&e.items&&e.items.length>0?e.items.map((e,t)=>{let a="b_b li-noti "+(e.seen?"not-seen":"seen"),n=!1;n="ACCEPTED"===e.data.state;let r=n?"Chấp nhận":"Từ chối",i=n?"success":"error",s=n?"green":"red";return l.a.createElement("div",{key:t,className:`${a}`},l.a.createElement("div",{className:"li-noti__div"},l.a.createElement(c.Avatar,{shape:"square",src:e.data.logoUrl,style:{width:"50px",height:"50px"},alt:"li_noti_img"})),l.a.createElement("div",{className:"data-noti"},l.a.createElement("ul",null,l.a.createElement("li",null,l.a.createElement(p.j,{value:"Công việc :"}),l.a.createElement(p.b,{value:e.data&&e.data.jobTitle&&e.data.jobTitle.toLowerCase()})),l.a.createElement("li",null,l.a.createElement(p.j,{value:"Nhà tuyển dụng :"}),l.a.createElement(p.b,{value:e.data&&e.data.employerName&&e.data.employerName.toLowerCase()})),l.a.createElement("li",null,l.a.createElement(p.j,{value:"Trạng thái :"}),l.a.createElement(p.b,{value:r}),l.a.createElement(c.Icon,{type:i,twoToneColor:s})),l.a.createElement("li",null,l.a.createElement(p.j,{value:"Loại :"}),l.a.createElement(p.b,{value:"REPLY_JOB"===e.type?" Ứng tuyển":""})),l.a.createElement("li",null,l.a.createElement(p.j,{value:"Thời gian :"}),l.a.createElement(p.b,{value:" "+Object(E.a)(e.createdDate,1e3)})))),l.a.createElement("div",{className:"set-noti",onClick:()=>this._createRequest(e.id,!e.seen)},e.seen?l.a.createElement(c.Tooltip,{title:"Đánh dấu là chưa đọc"},l.a.createElement(c.Icon,{type:"eye"})):l.a.createElement(c.Tooltip,{title:"Đánh dấu là đã đọc"},l.a.createElement(c.Icon,{type:"eye-invisible"}))))}):l.a.createElement(c.Empty,{description:"Không có thông báo nào"}))),l.a.createElement("div",{className:"pagination-result a_c"},l.a.createElement(c.Pagination,{defaultCurrent:1,total:e.totalItems,onChange:e=>{this.props.getNotiData(e-1),this.setState({pageIndex:e})}}))),l.a.createElement(c.Col,{xs:2})))))}}t.default=Object(r.connect)(e=>({noti:e.Noti,isAuthen:e.AuthState.isAuthen}),e=>({getNotiData:t=>e({type:h.b.NOTI.GET_NOTI,pageIndex:t})}))(g)},63:function(e,t,a){"use strict";a.d(t,"a",(function(){return n}));const n=e=>{var t=new Date(e);return t.getDate()+"/"+(t.getMonth()+1)+"/"+t.getFullYear()}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,