(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{103:function(e,t,a){},117:function(e,t,a){"use strict";a.r(t);var n=a(4),l=a.n(n),i=a(19),r=a(39),s=a(61),c=a(16),o=(a(103),a(10)),m=a(7),d=a(3),u=a(2),h=a(63),p=a(58),g=a.n(p),E=a(22),v=a(75),y=a(6),b=a(5),w=a(9),f=a(59),C=a.n(f);function x(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}const{TabPane:D}=r.Tabs;class T extends n.PureComponent{constructor(e){super(e),x(this,"setComment",e=>{this.setState({comment:e.target.value})}),x(this,"callback",e=>{this.props.history.push(`/bai-viet/${e}`)}),x(this,"DeleteComment",e=>{let t=[e];console.log(t),Object(y.a)(b.a,null,w.a.DELETE_COMMENT.replace("{id}",window.atob(this.state.id)),d.c,u.a,t,!1).then(e=>{console.log(e),this.getComment()}).catch(e=>{console.log(e)})}),this.state={id:null,author:{avatarUrl:null,firstName:null,lastName:null},type:null,rated:0,content:null,imageUrl:null,createdDate:null,title:null,views:0,idType:null,totalComment:null,listComment:[],loadingComment:!0,rating:5,comment:null,userID:null,loading:!0,listType:[]}}componentDidMount(){localStorage.setItem("last_access",window.location.href),this.setState({userID:localStorage.getItem("userID")}),this.getListTypeArticle(),this.DetailArticle(),this.getComment()}UNSAFE_componentWillReceiveProps(e){if(this.props.match.params.id===e.match.params.id)return 0;this.setState({loading:!0}),this.props.match.params.id=e.match.params.id,this.DetailArticle(),this.getComment()}async DetailArticle(){Object(o.b)(null,m.a.DETAIL.replace("{id}",window.atob(this.props.match.params.id)),d.b,u.c).then(e=>{let t=e.data;this.setState({author:t.admin,rated:t.averageRating,content:t.content,createdDate:Object(h.a)(t.createdDate),imageUrl:null===t.imageUrl?c.a:t.imageUrl,title:t.title,views:t.viewNumber,type:t.announcementType.name,idType:t.announcementType.id,totalComment:t.totalComment,id:this.props.match.params.id,loading:!1})})}async getComment(){let e={rating:null,userID:null,userType:null,createdDate:null,lastModified:null};try{Object(o.c)(e,m.a.COMMENT.replace("{id}",window.atob(this.props.match.params.id)),d.b,u.c).then(e=>{this.setState({listComment:e.data.items,loadingComment:!1,comment:null,rating:5})}).catch(e=>{})}catch{}}async getListTypeArticle(){await Object(y.a)(b.b,null,m.a.TYPE,d.b,{pageIndex:0,pageSize:50,priority:""},!1).then(e=>{this.setState({listType:e.data.items})})}async sendComment(){let{rating:e,comment:t}=this.state,a={comment:t,rating:e};await Object(y.a)(b.c,a,w.a.ADD_COMMENT.replace("{id}",window.atob(this.state.id)),d.c,u.a,null,!1),this.getComment()}render(){const{listType:e}=this.state;let t=E.a.getState().AuthState.isAuthen;const a=e=>l.a.createElement(r.Menu,{onClick:()=>{this.DeleteComment(e)}},l.a.createElement(r.Menu.Item,{key:"1"},"Xóa"));return this.state.loading?l.a.createElement("div",{className:"article-detail-loading"},l.a.createElement(C.a,{size:150,color:"#32A3F9",loading:this.state.loading})):l.a.createElement(s.a,{disableFooterData:!0},l.a.createElement("div",{className:"article-detail"},l.a.createElement(r.Affix,{offsetTop:0,children:l.a.createElement(r.Tabs,{defaultActiveKey:"1",onChange:this.callback,style:{backgroundColor:"white",marginBottom:0,textAlign:"center",width:"100%",fontWeight:500}},l.a.createElement(D,{tab:"Tất cả",key:"all"}),e&&e.length>0?e.map(e=>l.a.createElement(D,{disabled:!0,tab:e.name,key:e.id})):void 0)}),l.a.createElement(r.Row,null,l.a.createElement(r.Col,{xs:0,sm:0,md:0,lg:1,xl:1,xxl:1}),l.a.createElement(r.Col,{xs:24,sm:24,md:16,lg:16,xl:16,xxl:16},l.a.createElement(r.Row,{gutter:16},l.a.createElement(r.Col,{xs:0,sm:0,md:0,lg:3,xl:3,xxl:4},l.a.createElement(r.Affix,{offsetTop:200},l.a.createElement("div",{className:"affix-annou-card hidden-only-phone"},l.a.createElement("div",{className:"affix-annou-card-content"},l.a.createElement("div",null,l.a.createElement(r.Icon,{type:"message",style:{fontSize:22,marginTop:15},onClick:()=>{window.scrollTo({top:document.body.scrollHeight,behavior:"smooth"})}})),l.a.createElement("div",null,l.a.createElement(r.Icon,{type:"facebook",style:{fontSize:22,marginTop:15},onClick:()=>{window.open(`https://www.facebook.com/sharer/sharer.php?u=${window.location.href}`,"facebook-share-dialog","width=626, height=436"),console.log("1"),FB.ui({display:"popup",method:"share",href:"https://developers.facebook.com/docs/",picture:this.state.imageUrl},(function(e){}))}})),l.a.createElement("div",null,l.a.createElement(r.Icon,{type:"home",style:{fontSize:22,marginTop:15},onClick:()=>{window.location.href="/home"}})))))),l.a.createElement(r.Col,{xs:23,sm:23,md:23,lg:20,xl:20,xxl:20},l.a.createElement("div",{className:"article-detail-header"},l.a.createElement("div",null,this.state.author.lastName+" "+this.state.author.firstName),l.a.createElement("div",null," ",l.a.createElement(r.Icon,{type:"clock-circle"}),this.state.createdDate),l.a.createElement("div",null,l.a.createElement(r.Icon,{type:"eye"}),this.state.views),l.a.createElement("div",null,l.a.createElement(r.Icon,{type:"message"}),this.state.totalComment),l.a.createElement("div",null,l.a.createElement("a",{href:`/announcement/${this.state.idType}`},this.state.type))),l.a.createElement("div",null,l.a.createElement(r.Rate,{value:this.state.rated,disabled:!0})),l.a.createElement(r.Divider,null),l.a.createElement("div",{className:"content"},l.a.createElement("div",{className:"title"},this.state.title),l.a.createElement("div",{dangerouslySetInnerHTML:{__html:this.state.content}}),l.a.createElement(r.Divider,null)),t?l.a.createElement("div",{className:"comment"},l.a.createElement("div",{className:"rating-cmt"},l.a.createElement("div",{style:{fontWeight:"bold"}},"Đánh giá"),l.a.createElement(r.Rate,{value:this.state.rating,onChange:e=>{this.setState({rating:e})}})),l.a.createElement("div",null,l.a.createElement(g.a,{id:"text-msg",className:"text-comment",placeholder:"Viết phản hồi",value:this.state.comment,onChange:this.setComment,maxLength:1e3})),l.a.createElement("div",null,l.a.createElement("br",null),l.a.createElement(r.Button,{type:"primary",onClick:()=>{this.sendComment()}},"Gửi"))):l.a.createElement("div",null,l.a.createElement(r.Divider,null),l.a.createElement("a",{href:"/login",onClick:()=>{let e=window.location.href;localStorage.setItem("last_access",e)}}," ","Đăng nhập để bình luận")),l.a.createElement(r.Divider,null),this.state.listComment&&this.state.listComment.map((e,t)=>l.a.createElement("div",{className:"list-comment",key:t},l.a.createElement(r.Skeleton,{avatar:!0,paragraph:{rows:2},active:!0,loading:this.state.loadingComment},l.a.createElement("div",{className:"img-cmt"},l.a.createElement(r.Avatar,{src:e?e.avatarUrl:c.a,style:{marginRight:10,width:40,height:40},icon:"user"})),l.a.createElement("div",null,l.a.createElement("div",null,e.name),l.a.createElement("div",null,l.a.createElement(r.Rate,{value:e&&e.rating,disabled:!0,style:{fontSize:"1rem"}})),l.a.createElement("div",{className:"comment-msg"},e.comment)),l.a.createElement("div",{style:{display:e.userID===this.state.userID?"":"none",position:"absolute",right:"0"}},l.a.createElement(r.Dropdown,{overlay:a(e.id)},l.a.createElement(r.Icon,{type:"more"})),","))))))),l.a.createElement(r.Col,{xs:24,sm:12,md:7,lg:7,xl:6,xxl:6},l.a.createElement("div",{style:{marginTop:"15vh"}},l.a.createElement(v.a,{cardType:3})))),l.a.createElement(r.BackTop,null)))}}t.default=Object(i.connect)()(T)},63:function(e,t,a){"use strict";a.d(t,"a",(function(){return n}));const n=e=>{var t=new Date(e);return t.getDate()+"/"+(t.getMonth()+1)+"/"+t.getFullYear()}},69:function(e,t,a){"use strict";a.d(t,"a",(function(){return r}));var n=a(4),l=a.n(n),i=a(65);function r(e){return l.a.createElement("div",{className:"text-inner"},l.a.createElement("p",null,Object(i.a)(e.title,50)))}},72:function(e,t,a){"use strict";a.d(t,"a",(function(){return o}));var n=a(4),l=a.n(n),i=a(39),r=a(16),s=a(63),c=a(40);class o extends n.PureComponent{constructor(e){super(e),this.state={loading:!0,title:"",content:"",imageUrl:"",id:null,rating:0,date:0}}async componentDidMount(){await this.setState({title:this.props.title,content:this.props.summary,id:this.props.id,rating:this.props.rating,date:Object(s.a)(this.props.date),imageUrl:null===this.props.imageUrl?r.a:this.props.imageUrl,loading:!1})}render(){let{content:e,rating:t,imageUrl:a,title:n,id:r,loading:s,date:o}=this.state;return(l.a.createElement("div",null,l.a.createElement(i.Skeleton,{avatar:!0,paragraph:{rows:2},active:!0,loading:s},l.a.createElement(i.Row,{className:"card2",onClick:()=>window.location.assign(`/chi-tiet-bai-viet/${window.btoa(r)}`)},l.a.createElement(i.Col,{className:"a_c",xs:9,sm:10,md:10,lg:10,xl:10,xxl:10},l.a.createElement(c.LazyLoadImage,{className:"img-card",src:a,alt:n})),l.a.createElement(i.Col,{className:"ct-article",xs:13,sm:13,md:13,lg:13,xl:13,xxl:14},l.a.createElement("div",{className:"title-article"},n),l.a.createElement("div",{className:"summary"},e),l.a.createElement("div",{className:"info"},l.a.createElement("p",null,l.a.createElement(i.Icon,{type:"calendar"})," ",o),l.a.createElement(i.Rate,{disabled:!0,value:t,style:{fontSize:"0.8rem"}})))))))}}},75:function(e,t,a){"use strict";var n=a(4),l=a.n(n),i=a(6),r=a(7),s=a(3),c=a(69),o=a(39),m=a(16),d=a(8),u=a(63);class h extends n.PureComponent{constructor(e){super(e),this.state={loading:!0,title:"",content:"",imageUrl:"",id:null,rating:0,date:0}}async componentDidMount(){await this.setState({title:this.props.title,content:this.props.summary,id:this.props.id,rating:this.props.rating,date:Object(u.a)(this.props.date),imageUrl:null===this.props.imageUrl?m.a:this.props.imageUrl,loading:!1})}render(){return l.a.createElement(d.Link,{to:`/chi-tiet-bai-viet/${window.btoa(this.state.id)}`},l.a.createElement(o.Skeleton,{avatar:!0,paragraph:{rows:2},active:!0,loading:this.state.loading},l.a.createElement("div",{className:"card3"},l.a.createElement("img",{className:"img-card",src:this.state.imageUrl,alt:"article"}),l.a.createElement("div",{className:"info"},l.a.createElement("div",{className:"title-article"},this.state.title),l.a.createElement("div",{className:"summary"},this.state.content)),l.a.createElement("div",{className:"info"},l.a.createElement("div",null,l.a.createElement(o.Icon,{type:"calendar"})," ",this.state.date),l.a.createElement("div",null,l.a.createElement(o.Rate,{allowHalf:!0,disabled:!0,value:this.state.rating}))))))}}var p,g,E,v=a(72),y=a(5);class b extends n.PureComponent{constructor(e){super(e),this.state={listArticleData:[],pageIndex:0,pageSize:10,loading:!0}}componentDidMount(){this.getListArticle(0,5)}async getListArticle(e=0,t=5){let a={adminID:null,hidden:null,createdDate:null,announcementTypeID:null};"all"===this.props.idType?a.announcementTypeID=null:a.announcementTypeID=this.props.idType,await Object(i.a)(y.c,a,r.a.LIST+`?sortBy=a.viewNumber&sortType=desc&pageIndex=0&pageSize=${t}`,s.b,{pageIndex:e,pageSize:t},!1).then(e=>{e&&this.setState({listArticleData:e.data.items,loading:!1})})}render(){let{listArticleData:e}=this.state;return this.state.loading?l.a.createElement("div",null,"loading ....."):l.a.createElement("div",{className:"good-article"},l.a.createElement(c.a,{title:"Nhiều người đọc"}),e.map((e,t)=>l.a.createElement("div",{key:t,style:{display:0===t?"none":"",marginTop:20}},2===this.props.cardType&&l.a.createElement(v.a,{id:e.id,title:e.title,imageUrl:e.imageUrl,summary:e.previewContent,rating:e.averageRating,date:e.createdDate}),3===this.props.cardType&&l.a.createElement(h,{id:e.id,title:e.title,imageUrl:e.imageUrl,summary:e.previewContent,rating:e.averageRating,date:e.createdDate}))))}}E={cardType:2},(g="defaultProps")in(p=b)?Object.defineProperty(p,g,{value:E,enumerable:!0,configurable:!0,writable:!0}):p[g]=E;t.a=b}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,