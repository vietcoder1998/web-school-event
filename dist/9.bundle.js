(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{122:function(e,t,a){"use strict";a.r(t);var i=a(4),n=a.n(i),l=a(61),s=a(39),r=a(6),c=a(5),o=a(7),m=a(3),d=a(16),p=a(8),u=a(40);class g extends i.PureComponent{constructor(e){super(e),this.state={loading:!0,title:"",content:"",imageUrl:"",id:null}}async componentDidMount(){await this.setState({title:this.props.title,content:this.props.summary,id:this.props.id,imageUrl:null===this.props.imageUrl?d.a:this.props.imageUrl,loading:!1})}render(){return n.a.createElement(p.Link,{to:`/chi-tiet-bai-viet/${window.btoa(this.state.id)}`},n.a.createElement(s.Skeleton,{avatar:!0,paragraph:{rows:2},active:!0,loading:this.state.loading},n.a.createElement("div",{className:"card1"},n.a.createElement(u.LazyLoadImage,{className:"img-card",src:this.state.imageUrl,alt:"info"}),n.a.createElement("div",{className:"info-card"},n.a.createElement("div",{className:"title"},this.state.title),n.a.createElement("div",{className:"summary"},this.state.content)))))}}var h=a(69),y=a(75);function E(){return(E=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var i in a)Object.prototype.hasOwnProperty.call(a,i)&&(e[i]=a[i])}return e}).apply(this,arguments)}class v extends i.PureComponent{constructor(e){super(e),this.state={listArticleData:[],pageIndex:0,pageSize:10,loading:!0},this.carousel=n.a.createRef(),this.next=this.next.bind(this),this.previous=this.previous.bind(this)}next(){this.carousel.next()}previous(){this.carousel.prev()}componentDidMount(){this.getListArticle(0,5)}async getListArticle(e,t=5){let a={adminID:null,hidden:null,createdDate:null,announcementTypeID:null};"all"===this.props.idType?a.announcementTypeID=null:a.announcementTypeID=this.props.idType;let i=await Object(r.a)(c.c,a,o.a.LIST+`?pageIndex=${e}&pageSize=${t}`,m.b,{pageIndex:e,pageSize:t},!1);try{this.setState({listArticleData:i.data.items,loading:!1})}catch(e){}}render(){return n.a.createElement(n.a.Fragment,null,n.a.createElement(s.Col,{sm:24,md:24,lg:16,xl:16,xxl:16},n.a.createElement(h.a,{title:"Bài viết hay"}),n.a.createElement(s.Carousel,E({dots:!0,autoplay:!0,autoplaySpeed:3e3},{dots:!0,infinite:!0,slidesToShow:1,slidesToScroll:1}),this.state.listArticleData.map((e,t)=>n.a.createElement("div",{key:t},n.a.createElement(g,{id:e.id,title:e.title,imageUrl:e.imageUrl,summary:e.previewContent}))))),n.a.createElement(s.Col,{xs:24,sm:12,md:12,lg:7,xl:7,xxl:7},n.a.createElement(y.a,null)))}}var b=v,x=a(72),w=a(2);class f extends i.PureComponent{constructor(e){super(e),this.state={loading:!0,listArticleData:[],pageIndex:0,pageSize:5}}componentDidMount(){this.getListArticle(this.props.type.id)}async getListArticle(e){let t={adminID:null,hidden:null,createdDate:null,announcementTypeID:e};await Object(r.a)(c.c,t,o.a.LIST+"?pageIndex=0&pageSize=5",m.b,w.c,void 0,!1,!1,!0).then(e=>{if(e&&e.data&&e.data.items){let{listArticleData:t}=this.state;t=e.data.items,this.setState({listArticleData:t,loading:!1})}})}render(){let{listArticleData:e,loading:t}=this.state;return t?n.a.createElement(s.Skeleton,null):n.a.createElement(s.Skeleton,{avatar:!0,loading:t},e&&e.length>0?n.a.createElement(s.Col,{xs:24,sm:10,md:12,lg:8,xl:8,xxl:6},n.a.createElement(h.a,{title:this.props.type.name}),e.map((e,t)=>t<4?n.a.createElement(x.a,{key:e.id,id:e.id,title:e.title,imageUrl:e.imageUrl,summary:e.previewContent,rating:e.averageRating,date:e.createdDate}):"")):void 0)}}const{TabPane:D}=s.Tabs;class T extends n.a.Component{constructor(e){super(e),function(e,t,a){t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a}(this,"callback",e=>{this.props.history.push(`/bai-viet/${e}`)}),this.state={loading:!0,idType:null,listType:[]}}componentDidMount(){this.getListTypeArticle(),console.log(this.props)}async getListTypeArticle(){await Object(r.a)(c.b,null,o.a.TYPE,m.b,{pageIndex:0,pageSize:50,priority:""},!1).then(e=>{this.setState({listType:e.data.items})})}render(){let{listType:e}=this.state,{match:t}=this.props;return n.a.createElement(l.a,{disableFooterData:!0},n.a.createElement(n.a.Fragment,null,n.a.createElement(s.Affix,{offsetTop:0,children:n.a.createElement(s.Tabs,{defaultActiveKey:"1",onChange:this.callback,style:{backgroundColor:"white",marginBottom:0,textAlign:"center",width:"100%",fontWeight:500}},n.a.createElement(D,{tab:"Tất cả",key:"all"}),e&&e.length>0?e.map(e=>n.a.createElement(D,{disabled:!0,tab:e.name,key:e.id})):void 0)}),n.a.createElement(s.Row,{className:"content-an"},n.a.createElement(s.Col,{xs:24,sm:24,lg:23,xl:22,xxl:22},n.a.createElement("div",{className:"Article"},n.a.createElement(s.Row,{className:"head-an"},n.a.createElement(b,{idType:this.props.match.params.id})),n.a.createElement(s.Row,{className:"l-middle"},e&&e.length>0?e.map((e,a)=>n.a.createElement(f,{key:e.id,type:e,idType:t.params.id})):""))))))}}t.default=T},63:function(e,t,a){"use strict";a.d(t,"a",(function(){return i}));const i=e=>{var t=new Date(e);return t.getDate()+"/"+(t.getMonth()+1)+"/"+t.getFullYear()}},69:function(e,t,a){"use strict";a.d(t,"a",(function(){return s}));var i=a(4),n=a.n(i),l=a(65);function s(e){return n.a.createElement("div",{className:"text-inner"},n.a.createElement("p",null,Object(l.a)(e.title,50)))}},72:function(e,t,a){"use strict";a.d(t,"a",(function(){return o}));var i=a(4),n=a.n(i),l=a(39),s=a(16),r=a(63),c=a(40);class o extends i.PureComponent{constructor(e){super(e),this.state={loading:!0,title:"",content:"",imageUrl:"",id:null,rating:0,date:0}}async componentDidMount(){await this.setState({title:this.props.title,content:this.props.summary,id:this.props.id,rating:this.props.rating,date:Object(r.a)(this.props.date),imageUrl:null===this.props.imageUrl?s.a:this.props.imageUrl,loading:!1})}render(){let{content:e,rating:t,imageUrl:a,title:i,id:s,loading:r,date:o}=this.state;return(n.a.createElement("div",null,n.a.createElement(l.Skeleton,{avatar:!0,paragraph:{rows:2},active:!0,loading:r},n.a.createElement(l.Row,{className:"card2",onClick:()=>window.location.assign(`/chi-tiet-bai-viet/${window.btoa(s)}`)},n.a.createElement(l.Col,{className:"a_c",xs:9,sm:10,md:10,lg:10,xl:10,xxl:10},n.a.createElement(c.LazyLoadImage,{className:"img-card",src:a,alt:i})),n.a.createElement(l.Col,{className:"ct-article",xs:13,sm:13,md:13,lg:13,xl:13,xxl:14},n.a.createElement("div",{className:"title-article"},i),n.a.createElement("div",{className:"summary"},e),n.a.createElement("div",{className:"info"},n.a.createElement("p",null,n.a.createElement(l.Icon,{type:"calendar"})," ",o),n.a.createElement(l.Rate,{disabled:!0,value:t,style:{fontSize:"0.8rem"}})))))))}}},75:function(e,t,a){"use strict";var i=a(4),n=a.n(i),l=a(6),s=a(7),r=a(3),c=a(69),o=a(39),m=a(16),d=a(8),p=a(63);class u extends i.PureComponent{constructor(e){super(e),this.state={loading:!0,title:"",content:"",imageUrl:"",id:null,rating:0,date:0}}async componentDidMount(){await this.setState({title:this.props.title,content:this.props.summary,id:this.props.id,rating:this.props.rating,date:Object(p.a)(this.props.date),imageUrl:null===this.props.imageUrl?m.a:this.props.imageUrl,loading:!1})}render(){return n.a.createElement(d.Link,{to:`/chi-tiet-bai-viet/${window.btoa(this.state.id)}`},n.a.createElement(o.Skeleton,{avatar:!0,paragraph:{rows:2},active:!0,loading:this.state.loading},n.a.createElement("div",{className:"card3"},n.a.createElement("img",{className:"img-card",src:this.state.imageUrl,alt:"article"}),n.a.createElement("div",{className:"info"},n.a.createElement("div",{className:"title-article"},this.state.title),n.a.createElement("div",{className:"summary"},this.state.content)),n.a.createElement("div",{className:"info"},n.a.createElement("div",null,n.a.createElement(o.Icon,{type:"calendar"})," ",this.state.date),n.a.createElement("div",null,n.a.createElement(o.Rate,{allowHalf:!0,disabled:!0,value:this.state.rating}))))))}}var g,h,y,E=a(72),v=a(5);class b extends i.PureComponent{constructor(e){super(e),this.state={listArticleData:[],pageIndex:0,pageSize:10,loading:!0}}componentDidMount(){this.getListArticle(0,5)}async getListArticle(e=0,t=5){let a={adminID:null,hidden:null,createdDate:null,announcementTypeID:null};"all"===this.props.idType?a.announcementTypeID=null:a.announcementTypeID=this.props.idType,await Object(l.a)(v.c,a,s.a.LIST+`?sortBy=a.viewNumber&sortType=desc&pageIndex=0&pageSize=${t}`,r.b,{pageIndex:e,pageSize:t},!1).then(e=>{e&&this.setState({listArticleData:e.data.items,loading:!1})})}render(){let{listArticleData:e}=this.state;return this.state.loading?n.a.createElement("div",null,"loading ....."):n.a.createElement("div",{className:"good-article"},n.a.createElement(c.a,{title:"Nhiều người đọc"}),e.map((e,t)=>n.a.createElement("div",{key:t,style:{display:0===t?"none":"",marginTop:20}},2===this.props.cardType&&n.a.createElement(E.a,{id:e.id,title:e.title,imageUrl:e.imageUrl,summary:e.previewContent,rating:e.averageRating,date:e.createdDate}),3===this.props.cardType&&n.a.createElement(u,{id:e.id,title:e.title,imageUrl:e.imageUrl,summary:e.previewContent,rating:e.averageRating,date:e.createdDate}))))}}y={cardType:2},(h="defaultProps")in(g=b)?Object.defineProperty(g,h,{value:y,enumerable:!0,configurable:!0,writable:!0}):g[h]=y;t.a=b}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,